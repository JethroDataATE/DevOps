#!/bin/bash
#
# jethro docker bootstarp script

generateSSHKey(){

  jethro_install_user_=${JETHRO_INSTALL_USER-"jethro"}
  jethro_install_group_=${JETHRO_INSTALL_GROUP-"jethro"}

  # Create and add security keys for $jethro_install_user
  jethro_user_home=`eval echo ~${jethro_install_user_}`
  SSH_KEYS_DIR=${jethro_user_home}/.JethroKeys
  SSH_CONFIG_DIR=${jethro_user_home}/.ssh


  if [ -z $KEY_PATH ]
  then
    # if no path supplied - regenerat key.  
    echo "regenerating default key locally."
    cat /dev/null | ssh-keygen -q -t rsa -b 2048 -f $SSH_KEYS_DIR/id_rsa  -N ""
  else 
    # if key path supplied, check if it exists
    if [[ "$KEY_PATH" == hdfs://* ]] ; then
      echo
      echo "Search for Key path on hdfs..."

      if hdfs dfs -test -e $KEY_PATH;
      then
        echo "$KEY_PATH exists!"

        # copy key file
        echo "Copy key file to local fs."
        hadoop fs -copyToLocal $KEY_PATH $SSH_KEYS_DIR/id_rsa
        chmod 400 $SSH_KEYS_DIR/id_rsa
        ssh-keygen -f $SSH_KEYS_DIR/id_rsa -y > $SSH_KEYS_DIR/id_rsa.pub
      else
        echo "$KEY_PATH not found on HDFS"

        if [[ $GENERAT_KEY_IF_NOT_EXIST = "true" ]]
        then
          # Auto generate key on the given path
          echo
          echo "auto regenerating key: $KEY_PATH" 
          cat /dev/null | ssh-keygen -q -t rsa -b 2048 -f $SSH_KEYS_DIR/id_rsa  -N ""
          cp $SSH_KEYS_DIR/id_rsa $SSH_KEYS_DIR/id_rsa.tmp
          chmod 777 $SSH_KEYS_DIR/id_rsa.tmp
          su - $jethro_install_user_ -c "hadoop fs -put $SSH_KEYS_DIR/id_rsa.tmp $KEY_PATH"
          rm -f $SSH_KEYS_DIR/id_rsa.tmp          
        else
          echo "GENERAT_KEY_IF_NOT_EXIST wasn't set to true - no key will be generated."
          echo "exiting..."
          exit 1 
        fi
      fi
    else
      echo
      echo "Search for Key path localy..."
      if [ -e $KEY_PATH ] 
      then
        echo "$KEY_PATH exists!"

        # copy key file
        echo "Copy key file..."
        cp $KEY_PATH $SSH_KEYS_DIR/id_rsa
        chmod 400 $SSH_KEYS_DIR/id_rsa
        ssh-keygen -f $SSH_KEYS_DIR/id_rsa -y > $SSH_KEYS_DIR/id_rsa.pub
      else
        echo "$KEY_PATH not found."

        if [[ $GENERAT_KEY_IF_NOT_EXIST = "true" ]]
        then
        # Auto generate key on the given path
          echo
          echo "auto regenerating key: $KEY_PATH" 
          cat /dev/null | ssh-keygen -q -t rsa -b 2048 -f $SSH_KEYS_DIR/id_rsa  -N ""
          cp $SSH_KEYS_DIR/id_rsa $KEY_PATH       
        else
          echo "GENERAT_KEY_IF_NOT_EXIST wasn't set to true - no key will be generated."
          echo "exiting..."
          exit 1 
        fi
      fi
    fi
  fi

  #  Registering public key in authorized_keys* iff we successfully created it a new now
  chown ${jethro_install_user_}:${jethro_install_group_} $SSH_KEYS_DIR $SSH_KEYS_DIR/id_rsa  $SSH_KEYS_DIR/id_rsa.pub
  mkdir -p -m 0700 $SSH_CONFIG_DIR
  cat $SSH_KEYS_DIR/id_rsa.pub >>$SSH_CONFIG_DIR/authorized_keys
  cat $SSH_KEYS_DIR/id_rsa.pub >>$SSH_CONFIG_DIR/authorized_keys2
  chown ${jethro_install_user_}:${jethro_install_group_} $SSH_CONFIG_DIR $SSH_CONFIG_DIR/authorized_keys $SSH_CONFIG_DIR/authorized_keys2
  chmod 0600 $SSH_CONFIG_DIR/authorized_keys $SSH_CONFIG_DIR/authorized_keys2

  echo "Successfully created security key pair at '$SSH_KEYS_DIR'"
}


runBackgroudInit(){

  if [ ! -z $HADDOP_NAME_NODE_ADDRESS ]
  then
    # altering the core-site configuration
    echo configuring name node to: $HADDOP_NAME_NODE_ADDRESS
    sed s/HADDOP_NAME_NODE_ADDRESS/$HADDOP_NAME_NODE_ADDRESS/ $HADOOP_CONF_DIR/core-site.xml.template > $HADOOP_CONF_DIR/core-site.xml 
  fi

  # set jethro user/group ids
  groupmod -g $GROUP_ID jethro
  usermod -u $USER_ID jethro
  chown -R jethro:jethro /opt/jethro/current/bin
  chown -R jethro:jethro /home/jethro

  # Generating ssh key
  generateSSHKey

  if [ ! -z $AUTO_ATTACH_INSTANCE_NAME ]
  then

    if [ -z $AUTO_ATTACH_INSTANCE_PATH ]
    then
       echo "AUTO_ATTACH_INSTANCE_PATH cannot be empty!"
       exit 1
    fi
    # Attaching to requested instance
    echo Attaching instance: $AUTO_ATTACH_INSTANCE_NAME
    su - jethro -c "mkdir /home/jethro/$AUTO_ATTACH_INSTANCE_NAME-cache"
    su - jethro -c "JethroAdmin attach-instance $AUTO_ATTACH_INSTANCE_NAME -storage-path=$AUTO_ATTACH_INSTANCE_PATH -cache-path=/home/jethro/$AUTO_ATTACH_INSTANCE_NAME-cache -cache-size=0G"
  fi

  # Restarting all services
  service jethro stop >/dev/null 2>&1
  service jethro start >/dev/null 2>&1

  echo  
  echo "Jethro Docker is up!"
  echo "In order to ssh the container - use the predefined ssh port (see docker inpect command to see all mapped ports)."

}

echo configuring jethro docker environment...

runBackgroudInit &

exec /usr/sbin/init 