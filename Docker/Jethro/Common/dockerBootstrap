#!/bin/bash
#
# jethro docker bootstarp script

WORK_DIR=/jethro_install
CONF_DIR="$WORK_DIR/config"
SCRIPT_DIR="$WORK_DIR/scripts"

generateSSHKey(){

  jethro_install_user_=${JETHRO_INSTALL_USER-"jethro"}
  jethro_install_group_=${JETHRO_INSTALL_GROUP-"jethro"}

  # Create and add security keys for $jethro_install_user
  jethro_user_home=`eval echo ~${jethro_install_user_}`
  SSH_KEYS_DIR=${jethro_user_home}/.JethroKeys
  SSH_CONFIG_DIR=${jethro_user_home}/.ssh


  if [ -z $KEY_PATH ]
  then
    # if no path supplied - regenerat key.  
    echo "regenerating default key locally."
    cat /dev/null | ssh-keygen -q -t rsa -b 2048 -f $SSH_KEYS_DIR/id_rsa  -N ""
  else 
    # if key path supplied, check if it exists
    if [[ "$KEY_PATH" == hdfs://* ]] ; then
      echo
      echo "Search for Key path on hdfs..."

      if hdfs dfs -test -e $KEY_PATH;
      then
        echo "$KEY_PATH exists!"

        # copy key file
        echo "Copy key file to local fs."
        hadoop fs -copyToLocal $KEY_PATH $SSH_KEYS_DIR/id_rsa
        chmod 400 $SSH_KEYS_DIR/id_rsa
        ssh-keygen -f $SSH_KEYS_DIR/id_rsa -y > $SSH_KEYS_DIR/id_rsa.pub
      else
        echo "$KEY_PATH not found on HDFS"

        if [[ $GENERAT_KEY_IF_NOT_EXIST = "true" ]]
        then
          # Auto generate key on the given path
          echo
          echo "auto regenerating key: $KEY_PATH" 
          cat /dev/null | ssh-keygen -q -t rsa -b 2048 -f $SSH_KEYS_DIR/id_rsa  -N ""
          cp $SSH_KEYS_DIR/id_rsa $SSH_KEYS_DIR/id_rsa.tmp
          chmod 777 $SSH_KEYS_DIR/id_rsa.tmp
          su - $jethro_install_user_ -c "hadoop fs -put $SSH_KEYS_DIR/id_rsa.tmp $KEY_PATH"
          rm -f $SSH_KEYS_DIR/id_rsa.tmp          
        else
          echo "GENERAT_KEY_IF_NOT_EXIST wasn't set to true - no key will be generated."
          echo "exiting..."
          exit 1 
        fi
      fi
    else
      echo
      echo "Search for Key path localy..."
      if [ -e $KEY_PATH ] 
      then
        echo "$KEY_PATH exists!"

        # copy key file
        echo "Copy key file..."
        cp $KEY_PATH $SSH_KEYS_DIR/id_rsa
        chmod 400 $SSH_KEYS_DIR/id_rsa
        ssh-keygen -f $SSH_KEYS_DIR/id_rsa -y > $SSH_KEYS_DIR/id_rsa.pub
      else
        echo "$KEY_PATH not found."

        if [[ $GENERAT_KEY_IF_NOT_EXIST = "true" ]]
        then
        # Auto generate key on the given path
          echo
          echo "auto regenerating key: $KEY_PATH" 
          cat /dev/null | ssh-keygen -q -t rsa -b 2048 -f $SSH_KEYS_DIR/id_rsa  -N ""
          cp $SSH_KEYS_DIR/id_rsa $KEY_PATH       
        else
          echo "GENERAT_KEY_IF_NOT_EXIST wasn't set to true - no key will be generated."
          echo "exiting..."
          exit 1 
        fi
      fi
    fi
  fi

  #  Registering public key in authorized_keys* iff we successfully created it a new now
  chown ${jethro_install_user_}:${jethro_install_group_} $SSH_KEYS_DIR $SSH_KEYS_DIR/id_rsa  $SSH_KEYS_DIR/id_rsa.pub
  mkdir -p -m 0700 $SSH_CONFIG_DIR
  cat $SSH_KEYS_DIR/id_rsa.pub >>$SSH_CONFIG_DIR/authorized_keys
  cat $SSH_KEYS_DIR/id_rsa.pub >>$SSH_CONFIG_DIR/authorized_keys2
  chown ${jethro_install_user_}:${jethro_install_group_} $SSH_CONFIG_DIR $SSH_CONFIG_DIR/authorized_keys $SSH_CONFIG_DIR/authorized_keys2
  chmod 0600 $SSH_CONFIG_DIR/authorized_keys $SSH_CONFIG_DIR/authorized_keys2

  echo "Successfully created security key pair at '$SSH_KEYS_DIR'"
}

createAttachInstance(){
  
  if [ ! -z $INSTANCE_NAME ]
  then

    if [ -z $INSTANCE_STORAGE_PATH ]
    then
       echo "INSTANCE_STORAGE_PATH cannot be empty!"
       exit 1
    fi

    DstorageType="HDFS"
    if [ -z $HADOOP_NAME_NODE_ADDRESS ]
    then
      DstorageType="POSIX"
    fi

    # Create/attach instance
    
    instances=( $(su - jethro -c "JethroAdmin list-storage-instances -storage-path=$INSTANCE_STORAGE_PATH -Dstorage.type=$DstorageType" | awk -v instance="$INSTANCE_NAME" '{if ($1==instance) {print $1, $3}}') )
    if ! [ -z ${instances[0]} ]
    then
      echo
      echo "Instance found"
      echo "checking if already attached..."
      if [ -z ${instances[1]} ] || [ ${instances[1]} = "Not" ]
      then
          echo "instance not attached"
          echo "Attaching instance..."
          test -d $INSTANCE_CACHE_PATH || su - jethro -c "mkdir -p $INSTANCE_CACHE_PATH"
         
          su - jethro -c "JethroAdmin attach-instance $INSTANCE_NAME -storage-path=$INSTANCE_STORAGE_PATH -cache-path=$INSTANCE_CACHE_PATH -cache-size=$INSTANCE_CACHE_SIZE -Dstorage.type=$DstorageType"
      else
          echo "instance already attached"
      fi

    else
      echo "Instance $INSTANCE_NAME not found."
      echo "Creating instanse..."
      test -d $INSTANCE_CACHE_PATH || su - jethro -c "mkdir -p $INSTANCE_CACHE_PATH"
      su - jethro -c "JethroAdmin create-instance $INSTANCE_NAME -storage-path=$INSTANCE_STORAGE_PATH -cache-path=$INSTANCE_CACHE_PATH -cache-size=$INSTANCE_CACHE_SIZE -Dstorage.type=$DstorageType"
    fi

    service jethro start
  fi
}

configureKerberisedHadoopEnv(){
  # altering the krb5.conf configuration
  echo configuring kerberos server to: $KERBEROS_SERVER, default rlm to: $KERBEROS_DEFAULT_RLM

  sed -e "s/HADOOP_NAME_NODE_ADDRESS/$HADOOP_NAME_NODE_ADDRESS/" -e "s/KERBEROS_DEFAULT_RLM/$KERBEROS_DEFAULT_RLM/" $CONF_DIR/kerberos/conf-site.template.xml > $HADOOP_CONF_DIR/core-site.xml 
  sed -e "s/KERBEROS_SERVER/$KERBEROS_SERVER/" -e "s/KERBEROS_DEFAULT_RLM/$KERBEROS_DEFAULT_RLM/" /etc/krb5.conf.template > /etc/krb5.conf 
  cp $CONF_DIR/kerberos/yarn-site.xml $HADOOP_CONF_DIR

  # Set host.ini kerberos config
  if [ ! -z $KERBEROS_PRINCIPAL ] && [ ! -z $KERBEROS_KEYTAB_PATH ]
  then
    echo "hdfs.kerberos.principal=$KERBEROS_PRINCIPAL" >> /opt/jethro/config/host-conf.ini
    echo "hdfs.kerberos.keytab=$KERBEROS_KEYTAB_PATH" >> /opt/jethro/config/host-conf.ini
  fi

  # Set hive configuration
  if [ ! -z $HIVE_SERVER ] && [ ! -z $HIVE_META_STORE_URI ]
  then
    echo "Configuring hive server to: $HIVE_SERVER"
    PARSED_HIVE_META_STORE_URI="${HIVE_META_STORE_URI//\//\\/}"
    sed -e "s/HIVE_SERVER/$HIVE_SERVER/" -e "s/HIVE_META_STORE_URI/$PARSED_HIVE_META_STORE_URI/" -e "s/KERBEROS_DEFAULT_RLM/$KERBEROS_DEFAULT_RLM/" $CONF_DIR/kerberos/hive-site.template.xml > $HIVE_CONF_DIR/hive-site.xml
  fi 
}

configureHadoopEnv(){
  # altering the core-site configuration
  sed s/HADOOP_NAME_NODE_ADDRESS/$HADOOP_NAME_NODE_ADDRESS/ $CONF_DIR/hdfs/core-site.template.xml > $HADOOP_CONF_DIR/core-site.xml 

 # Set hive configuration
  if [ ! -z $HIVE_SERVER ] && [ ! -z $HIVE_META_STORE_URI ]
  then
    echo "Configuring hive server to: $HIVE_SERVER"
    PARSED_HIVE_META_STORE_URI="${HIVE_META_STORE_URI//\//\\/}"
    sed -e "s/HIVE_SERVER/$HIVE_SERVER/" -e "s/HIVE_META_STORE_URI/$PARSED_HIVE_META_STORE_URI/" $CONF_DIR/hdfs/hive-site.template.xml > $HIVE_CONF_DIR/hive-site.xml
  fi 
}

runBackgroudInit(){

  # Remove jethro service from systemctl monitor.
  systemctl stop jethro.service >/dev/null 2>&1
  service jethro stop >/dev/null 2>&1
  service jethro start >/dev/null 2>&1

  chown jethro:jethro /opt/jethro/current/instances/jethro.out

  if [ ! -z $HADOOP_NAME_NODE_ADDRESS ]
  then
    echo configuring name node to: $HADOOP_NAME_NODE_ADDRESS
    
    if [ ! -z $KERBEROS_SERVER ] && [ ! -z $KERBEROS_DEFAULT_RLM ]
    then
      configureKerberisedHadoopEnv
      echo "Genertaing Kerberos ticktes - please wait..."
      sleep 12
    else
      configureHadoopEnv
    fi
  fi

  # Generating ssh key
  generateSSHKey

 # Create/attach instance
  createAttachInstance

  # Restarting all services
  systemctl stop jethro.service >/dev/null 2>&1
  service jethro stop >/dev/null 2>&1
  service jethro start >/dev/null 2>&1

  # Fix jethro manager permissions and stop the service
  sleep 5
  service jethromng stop >/dev/null 2>&1
  systemctl stop jethromng.service >/dev/null 2>&1
  pkill PM2 >/dev/null 2>&1
  chown -R jethro:jethro /opt/jethro/jethromng/pm2
  chown -R jethro:jethro /opt/jethro/jethromng/resources
  chown -R jethro:jethro /var/log/jethro/jethromng
  chmod 777 /opt/jethro/jethromng/jethromng.out
  chown jethro:jethro /opt/jethro/jethromng/jethromng.config
  
  # Restarting Jethro Manager as jethro
  if [ ! -z $RUN_JETHRO_MANAGER ]
  then
    echo "Launching Jethro Manager ..."
    su - jethro -c "service jethromng start" >/dev/null 2>&1
  fi

  echo  
  echo "Jethro Docker is up!"
  echo "In order to ssh the container - use the predefined ssh port (see docker inpect command to see all mapped ports)."

}

###############################
# MAIN SCRIPT STARTS HERE
###############################

echo configuring jethro docker environment...

runBackgroudInit &

exec /usr/sbin/init 