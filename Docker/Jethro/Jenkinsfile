
build job: 'Start_GUI-Builder_Node', parameters: [string(name: 'Storage', value: 'Posix'), [$class: 'NodeParameterValue', name: 'GUI-Builder', labels: ['GUI-Builder'], nodeEligibility: [$class: 'AllNodeEligibility']], string(name: 'Image_type', value: 'GUI_BUILDER')]

node('GUI-Builder') {

    try {
        
        cleanWs()

         withEnv(['VERSION='+ env.VERSION, 'RPM_NAME='+ env.RPM_NAME, 'HADOOP_DEST='+ env.HADOOP_DEST, 'HADOOP_DEST_VERSION='+ env.HADOOP_DEST_VERSION, 'JAVA_VERSION='+ env.JAVA_VERSION, 'JETHRO_MANAGER_RPM='+env.JETHRO_MANAGER_RPM ]) {

            stage('Clone Sources') {

                checkout(
                    [$class: 'GitSCM', branches: [[name: '*/master']],
                    browser: [$class: 'GithubWeb', repoUrl: 'https://github.com/JethroDataATE/DevOps'],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [
                        [$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [[path: 'Docker/Jethro']]]
                    ],
                    submoduleCfg: [],
                    userRemoteConfigs: [[credentialsId: '7cf4f71c-34af-4252-be92-2a445e7b0e18', url: 'https://github.com/JethroDataATE/DevOps']]]
                )
                    
            }

            stage('Build Docker') {

                echo 'Building Docker'
                echo ''
                echo 'Cleanup...'
                sh "docker stop \$(docker ps -a -q) || echo "
                sh "docker rm \$(docker ps -a -q) || echo "
                sh "docker rmi \$(docker images -q) -f || echo " 
                RPM_NAME = RPM.substring(RPM.lastIndexOf("/")+1)
                echo "RPM_NAME: $RPM_NAME"
                def buildJethroMng = ("$JETHRO_MANAGER_RPM" != null && "$JETHRO_MANAGER_RPM" != "")
                if (buildJethroMng)
                    echo "JETHRO_MANAGER_RPM: $JETHRO_MANAGER_RPM"
                VERSION = RPM_NAME.substring(7, RPM_NAME.lastIndexOf(".x86_64.rpm"))
                VERSION = "$Hadoop_Distribution-$VERSION"
                echo "VERSION: $VERSION" 
                echo 'Started build...'
                def isPosix = ("$Hadoop_Distribution" == 'POSIX') || ("$Hadoop_Distribution" == 'sanity_tpcds');
                if (isPosix) {
                    echo 'Building POSIX docker image...'
                    if (buildJethroMng)
                        sh "cd Docker/Jethro/ && docker build -t jethrodata/jethro --build-arg JETHRO_RPM_LOACTION=$RPM --build-arg JAVA_VERSION=$Java_Version --build-arg JETHROMNG_RPM_LOACTION=$JETHRO_MANAGER_RPM -f $Hadoop_Distribution/Dockerfile ."  
                    else
                        sh "cd Docker/Jethro/ && docker build -t jethrodata/jethro --build-arg JETHRO_RPM_LOACTION=$RPM --build-arg JAVA_VERSION=$Java_Version -f $Hadoop_Distribution/Dockerfile ."   
                }
                else {
                     echo 'Building HDFS docker image...'
                     if (buildJethroMng)
                        sh "cd Docker/Jethro/ && docker build -t jethrodata/jethro --build-arg JETHRO_RPM_LOACTION=$RPM  --build-arg JETHROMNG_RPM_LOACTION=$JETHRO_MANAGER_RPM --build-arg JAVA_VERSION=$Java_Version --build-arg HADOOP_DIST_VERSION=$Hadoop_Distribution_Version -f $Hadoop_Distribution/Dockerfile ."   
                    else
                        sh "cd Docker/Jethro/ && docker build -t jethrodata/jethro --build-arg JETHRO_RPM_LOACTION=$RPM --build-arg JAVA_VERSION=$Java_Version --build-arg HADOOP_DIST_VERSION=$Hadoop_Distribution_Version -f $Hadoop_Distribution/Dockerfile ."   
                }
            }

            stage('Deploy Docker') {
                echo 'deploying to docker hub'
                sh "docker login --username=iziko --password=pass@word3"
                sh "docker tag jethrodata/jethro:latest jethrodata/jethro:$VERSION"
                sh "docker push jethrodata/jethro:latest"
                sh "docker push jethrodata/jethro:$VERSION"
                echo "Uploading dopcker image to S3"
                echo "VERSION: $VERSION"
                def imageFileName = "dockerDeploy/jethro_docker-$VERSION" + ".tar"
                sh "mkdir dockerDeploy && docker save --output $imageFileName jethrodata/jethro:$VERSION"
                def deploymentTarget
                if (RPM.indexOf("https://") > -1) {
                    deploymentTarget = RPM.substring(8,RPM.lastIndexOf("/"))
                }
                else {
                    deploymentTarget = RPM.substring(7,RPM.lastIndexOf("/"))
                } 
                echo "deploymentTarget: $deploymentTarget"
                def bucketName = deploymentTarget.substring(0, deploymentTarget.indexOf("."))
                echo "bucketName: $bucketName"
                def bucketPath = ""
                if (deploymentTarget.indexOf("/") > -1) {
                    bucketPath = deploymentTarget.substring(deploymentTarget.indexOf("/"))
                }
                echo "bucketPath: $bucketPath"
                def targetPath = "s3://$bucketName$bucketPath"
                echo "targetPath: $targetPath"
                sh "aws s3 cp dockerDeploy/ $targetPath --recursive --acl public-read"
            }
        }
        currentBuild.result = 'SUCCESS'
    }
    catch (any) {
        echo "Build faild: $any"
        currentBuild.result = 'FAILURE'
    }
    // finally {
    //         def buildres = currentBuild.result;
    //         echo "build res: $buildres"
    //         emailext attachLog: true, 
    //         body: "See ${env.BUILD_URL}", 
    //         compressLog: true,
    //         mimeType: 'text/html',
    //         recipientProviders: [[$class: 'DevelopersRecipientProvider']],
    //         replyTo: 'ui@jethrodata.com',
    //         subject: "Jethro docker build has finished with ${currentBuild.result}",
    //         to: 'ui@jethrodata.com'
    // }
}
        